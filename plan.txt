Task1 - высотометр

main1

0. Хедеры + define NOWARNINGS + time.h
1. Переменная startHeight
2. Запрашиваем высоту startHeight у пользователя, пишем в startHeight.
3. Цикл (while startHeight > 0)
	- выводит startHeight
	- вызывает height(currTime, startHeight)
4. printf("BABAH!!!)
5. return 0

task1

0. хедеры + define
1. startHeight = startHeight - (9.81 * (currTime * currTime) / 2)
2. Возвращаем startHeight.


=======================================

Task 2 - угадай число

main2

0. хедеры
1. Переменные value И secret
2. генеруируем число от 1 до 100, пишем в secret
3. while(1)
	- Приглашаем пользователя ввести число, записываем в value
	- если turn(value, secret) == 0, 
		- пишем "угадал"
		- завершаем программу
	- если turn > 0,
	    - пишем "меньше"
	- если turn < 0 
		- пишем "больше"
		
task2

0. если (value == secret) - возвращаем 0
1. если (value < secret) - возвращаем -1
2. если (value > secret) - возвращаем 1


========================================

Task 3 - треугольник из звёздочек

main3

0. хедеры
1. переменная для хранения количество строк звёздочек "lines", переменная "buf[80]"
2. цикл for (line = 1; i <= lines; i++)
	- printf(buf, line)
3. return 0

task3

0. Цикл (int i = 0, i < 80, i ++)
	- если (i < (39 - (line + line - 1) / 2) || (i > 39 + (line + line - 1) /2 )
		buff[i] = ' ';
	- в остальных случаях 
		buff[i] = '*';
1. возвращаем buff;

=========================================
Task 4 - сортировка в массиве: сначала буквы, потом цифры

main4

0. хедеры
1. переменная char line[64]
2. генерируем хеш, записываем в line
3. Выводим получившийся хеш.
4. Выводим process(line)
5. завершаем программу

task4

char buff;

0. цикл (int i = 0; i < strlen(line) / 2; i++)
	если (line[i] == [A-z])
		цикл (int j = strlen(line); int > strlen(line) /2; i--)
			если line[j] == [0-9]
				buff = line[j];
				line[j] = line[i];
				line[i] = buff;
				break;
1. Вернуть line;
	
=========================================
	
Task 5 - генератор паролей

main5

0. хедеры
1. перменная char line[8]
2. цикл от 0 до 10;
	вызываем password(line);

task5
https://stackoverflow.com/questions/30486336/random-password-generator-same-string


=========================================

Task6 - удаление лишних пробелов

main6

0. хедеры
1. переменная массив char line[256] = {0};
2. Предлагаем ввести строку, записываем в Line
3. Выводим введённую пользователем строку line
4. Выводим результат clear(line)
5. Завершаем программу

task6

0. Хедеры
1. Функция (moveArray(int i, int j) передвижения всех последующих символов на позицию после текущего эелемента
	цикл перемещения: while (j < strlen(line))
		line[i] == line[j]
		i++
		j++
2. цикл проверки символа - равен ли ' ': for (i = 0; i < strlen(line); i++)
	если line[i] == ' '
		цикл поиска следующего символа != ' ': for (j = i+1; j < strlen(line; j++)
			если line[j] != ' '
				moveArray(i+1, j)
	если (line[i] == ' ' && i == 0)
		moveArray(i, i+1)
	если (line[i] == ' ' && line[i+1] == '\0')
		line[i] = '\0';
4. return line;

==========================================
	
Task 7 - таблица встречаемости символов

main7
	
0. хедеры
1. переменная char line[512] = {0}, int resultCounters = {0}; char resultSymbols[256] = {'0'};
2. Просим ввести строку
3. Записываем строку в line.
4. Цикл заполнения resultSymbols всеми символами: for (i = 0; i < strlen(resultSymbols); i++) 
	int k = -128;
	resultSymbols[i] = [k]
	k++;
5. Цикл проверки каждого символа
	for (i = 0; i < strlen(line); i++)
		for (j = 0; j < strlen(resultSybmols); j++)
			if (line[i] == resultSymbols[j])
					resultCounters[j]++;
6. Цикл вывода таблицы: for (n = 0; n < strlen(resultCounters); n++)
							printf("'%c' symbol encountered %d times\n", resultSymbold[n], resultCounters[n]);
7. Return 0;
					
							
	
	
	
	
	
	
	
	
	
	